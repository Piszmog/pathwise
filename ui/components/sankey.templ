package components

import (
	"strconv"
	"github.com/Piszmog/pathwise/ui/types"
)

func calculatePercentage(part, total int64) string {
	if total == 0 {
		return "0"
	}
	return strconv.FormatInt((part*100)/total, 10)
}

templ SankeyGraph(data types.AnalyticsData) {
	<div class="w-full">
		<div id="sankey-viz" class="w-full h-96 border border-gray-100 rounded bg-gray-50"></div>
		<div class="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
			<div class="bg-blue-50 rounded-lg p-4">
				<div class="font-medium text-blue-900">Total Applications</div>
				<div class="text-2xl font-bold text-blue-600">{ strconv.FormatInt(data.Stats.TotalApplications, 10) }</div>
			</div>
			<div class="bg-yellow-50 rounded-lg p-4">
				<div class="font-medium text-yellow-900">Interview Rate</div>
				<div class="text-2xl font-bold text-yellow-600">{ calculatePercentage(data.Stats.TotalInterviewing, data.Stats.TotalApplications) }%</div>
			</div>
			<div class="bg-green-50 rounded-lg p-4">
				<div class="font-medium text-green-900">Success Rate</div>
				<div class="text-2xl font-bold text-green-600">{ calculatePercentage(data.Stats.TotalAccepted, data.Stats.TotalApplications) }%</div>
			</div>
		</div>
		<script>
			(function () {
				const analyticsData = {{ data }};
				renderSankey(analyticsData.SankeyData);

				function renderSankey(data) {
					const container = document.getElementById("sankey-viz");
					container.innerHTML = "";

					const margin = { top: 20, right: 20, bottom: 20, left: 20 };
					const containerWidth = container.offsetWidth;
					const width = containerWidth - margin.left - margin.right;
					const height = 380 - margin.top - margin.bottom;

					const svg = d3
						.select("#sankey-viz")
						.append("svg")
						.attr("width", width + margin.left + margin.right)
						.attr("height", height + margin.top + margin.bottom);

					const g = svg
						.append("g")
						.attr("transform", `translate(${margin.left},${margin.top})`);

					const sankey = d3
						.sankey()
						.nodeWidth(15)
						.nodePadding(20)
						.extent([
							[1, 1],
							[width - 1, height - 6],
						]);

					const { nodes, links } = sankey(data);

					const colorScale = d3
						.scaleOrdinal()
						.domain([
							"Applied",
							"Watching",
							"Interviewing",
							"Offered",
							"Accepted",
							"Rejected",
							"Withdrawn",
							"Declined",
						])
						.range([
							"#3b82f6",
							"#6b7280",
							"#f59e0b",
							"#10b981",
							"#059669",
							"#ef4444",
							"#6b7280",
							"#ef4444",
						]);

					g.append("g")
						.selectAll("path")
						.data(links)
						.enter()
						.append("path")
						.attr("d", d3.sankeyLinkHorizontal())
						.attr("stroke", (d) => colorScale(d.source.name))
						.attr("stroke-opacity", 0.3)
						.attr("stroke-width", (d) => Math.max(1, d.width))
						.attr("fill", "none")
						.on("mouseover", function (event, d) {
							d3.select(this).attr("stroke-opacity", 0.6);
						})
						.on("mouseout", function (event, d) {
							d3.select(this).attr("stroke-opacity", 0.3);
						})
						.append("title")
						.text(
							(d) =>
								`${d.source.name} â†’ ${d.target.name}: ${d.value} applications`,
						);

					g.append("g")
						.selectAll("rect")
						.data(nodes)
						.enter()
						.append("rect")
						.attr("x", (d) => d.x0)
						.attr("y", (d) => d.y0)
						.attr("height", (d) => d.y1 - d.y0)
						.attr("width", (d) => d.x1 - d.x0)
						.attr("fill", (d) => colorScale(d.name))
						.attr("stroke", "#000")
						.attr("stroke-width", 0.5)
						.append("title")
						.text((d) => `${d.name}: ${d.value || 0} applications`);

					g.append("g")
						.selectAll("text")
						.data(nodes)
						.enter()
						.append("text")
						.attr("x", (d) => (d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6))
						.attr("y", (d) => (d.y1 + d.y0) / 2)
						.attr("dy", "0.35em")
						.attr("text-anchor", (d) => (d.x0 < width / 2 ? "start" : "end"))
						.text((d) => d.name)
						.style("font-size", "12px")
						.style("font-weight", "500")
						.style("fill", "#374151");
				}
			})();
		</script>
	</div>
}

