package components

import (
	"github.com/Piszmog/pathwise/ui/types"
	"strings"
)

templ JobListingDetails(job types.JobListingDetails) {
	<div class="space-y-8">
		<div class="pb-6 border-b border-gray-200">
			<div class="flex items-start space-x-4">
				<div class="flex-1 min-w-0">
					<h1 class="text-2xl font-bold text-gray-900">{ job.Company }</h1>
					<p class="text-lg text-gray-600 mt-1">{ job.Title }</p>
					<div class="flex items-center gap-x-2 text-sm text-gray-500 mt-2">
						<span>Posted { job.CreatedAt.Format("Jan 2, 2006") }</span>
						<svg viewBox="0 0 2 2" class="h-1 w-1 fill-current">
							<circle cx="1" cy="1" r="1"></circle>
						</svg>
						<span>Source: { job.Source.Info().DisplayName }</span>
					</div>
				</div>
				<div class="flex-shrink-0">
					@jobSourceBadge(job.Source)
				</div>
			</div>
			<div class="flex gap-2 mt-4">
				if job.IsRemote {
					<span class="inline-flex items-center rounded-full bg-green-50 px-3 py-1 text-sm font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
						Remote
					</span>
				}
				if job.IsHybrid {
					<span class="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-sm font-medium text-blue-700 ring-1 ring-inset ring-blue-600/20">
						Hybrid
					</span>
				}
				if !job.IsRemote && !job.IsHybrid {
					<span class="inline-flex items-center rounded-full bg-gray-50 px-3 py-1 text-sm font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
						On-site
					</span>
				}
			</div>
		</div>
		<div class="grid grid-cols-1 gap-x-6 gap-y-6 sm:grid-cols-2">
			<div class="sm:col-span-2">
				<h3 class="text-base font-semibold leading-6 text-gray-900 mb-4">Job Information</h3>
			</div>
			if job.Location != nil {
				<div>
					<label class="block text-sm font-medium leading-6 text-gray-900">Location</label>
					<div class="mt-2 p-3 bg-gray-50 rounded-md border border-gray-200">
						<p class="text-sm text-gray-900">{ *job.Location }</p>
					</div>
				</div>
			}
			if job.RoleType != nil {
				<div>
					<label class="block text-sm font-medium leading-6 text-gray-900">Role Type</label>
					<div class="mt-2 p-3 bg-gray-50 rounded-md border border-gray-200">
						<p class="text-sm text-gray-900">{ *job.RoleType }</p>
					</div>
				</div>
			}
			if job.Salary != nil {
				<div>
					<label class="block text-sm font-medium leading-6 text-gray-900">Salary</label>
					<div class="mt-2 p-3 bg-green-50 rounded-md border border-green-200">
						<p class="text-sm font-semibold text-green-700">{ *job.Salary }</p>
					</div>
				</div>
			}
			if job.Equity != nil {
				<div>
					<label class="block text-sm font-medium leading-6 text-gray-900">Equity</label>
					<div class="mt-2 p-3 bg-purple-50 rounded-md border border-purple-200">
						<p class="text-sm font-semibold text-purple-700">{ *job.Equity }</p>
					</div>
				</div>
			}
		</div>
		if job.Description != nil {
			<div class="bg-white rounded-lg border border-gray-200 p-6">
				<h3 class="text-base font-semibold leading-6 text-gray-900 mb-3">Job Description</h3>
				<div class="prose prose-sm max-w-none">
					<p class="text-gray-700 leading-relaxed">{ *job.Description }</p>
				</div>
			</div>
		}
		if len(job.TechStacks) > 0 {
			<div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-6">
				<h3 class="text-base font-semibold leading-6 text-gray-900 mb-4">Technology Stack</h3>
				<div class="flex flex-wrap gap-3">
					for _, tech := range job.TechStacks {
						@techStackBadge(tech)
					}
				</div>
			</div>
		}
		<div class="bg-blue-50 rounded-lg border border-blue-200 p-6">
			<h3 class="text-base font-semibold leading-6 text-blue-900 mb-3">About the Company</h3>
			<p class="text-blue-800 leading-relaxed mb-4">{ job.CompanyDescription }</p>
			if job.CompanyURL != nil {
				<a href={ templ.SafeURL(*job.CompanyURL) } target="_blank" class="inline-flex items-center text-blue-700 hover:text-blue-900 font-medium">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
					</svg>
					Visit Company Website
				</a>
			}
		</div>
		<div class="bg-green-50 rounded-lg border border-green-200 p-6">
			<h3 class="text-base font-semibold leading-6 text-green-900 mb-4">Contact & Links</h3>
			<div class="space-y-3">
				if job.ContactEmail != nil {
					<div class="flex items-center">
						<svg class="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
						</svg>
						<a href={ templ.SafeURL("mailto:" + *job.ContactEmail) } class="text-green-700 hover:text-green-900 font-medium">
							{ *job.ContactEmail }
						</a>
					</div>
				}
				if job.SourceURL != nil {
					<div class="flex items-center">
						<svg class="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
						</svg>
						<a href={ templ.SafeURL(*job.SourceURL) } target="_blank" class="text-green-700 hover:text-green-900 font-medium">
							View Original Post on { job.Source.Info().DisplayName }
						</a>
					</div>
				}
			</div>
		</div>
	</div>
}

templ techStackBadge(tech string) {
	{{ techColors := getTechStackColor(tech) }}
	<span class={ "inline-flex items-center px-3 py-2 rounded-full text-sm font-medium", techColors }>
		{ tech }
	</span>
}

func getTechStackColor(tech string) string {
	techLower := strings.ToLower(tech)
	switch {
	case strings.Contains(techLower, "go"):
		return "bg-cyan-100 text-cyan-800 ring-1 ring-cyan-200"
	case strings.Contains(techLower, "react"):
		return "bg-blue-100 text-blue-800 ring-1 ring-blue-200"
	case strings.Contains(techLower, "typescript") || strings.Contains(techLower, "javascript"):
		return "bg-yellow-100 text-yellow-800 ring-1 ring-yellow-200"
	case strings.Contains(techLower, "python"):
		return "bg-green-100 text-green-800 ring-1 ring-green-200"
	case strings.Contains(techLower, "rust"):
		return "bg-orange-100 text-orange-800 ring-1 ring-orange-200"
	case strings.Contains(techLower, "node"):
		return "bg-green-100 text-green-800 ring-1 ring-green-200"
	case strings.Contains(techLower, "docker") || strings.Contains(techLower, "kubernetes"):
		return "bg-blue-100 text-blue-800 ring-1 ring-blue-200"
	case strings.Contains(techLower, "aws") || strings.Contains(techLower, "cloud"):
		return "bg-orange-100 text-orange-800 ring-1 ring-orange-200"
	case strings.Contains(techLower, "postgres") || strings.Contains(techLower, "database") || strings.Contains(techLower, "mongodb"):
		return "bg-indigo-100 text-indigo-800 ring-1 ring-indigo-200"
	default:
		return "bg-gray-100 text-gray-800 ring-1 ring-gray-200"
	}
}

