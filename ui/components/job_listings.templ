package components

import (
	"github.com/Piszmog/pathwise/ui/types"
	"strconv"
)

templ JobListings(jobs []types.JobListing, paginationOpts types.PaginationOpts) {
	<!DOCTYPE html>
	<html lang="en">
		@Head(false)
		@jobListingsBody(jobs, paginationOpts)
	</html>
}

templ jobListingsBody(jobs []types.JobListing, paginationOpts types.PaginationOpts) {
	<body class="min-h-screen flex flex-col">
		<main class="flex-1">
			@header(CurrentPageJobListings)
			@jobListingsContent(jobs, paginationOpts)
			@drawer("job-listing-details", "Job Details") {
				<div id="job-listing-details"></div>
			}
		</main>
		@footer()
	</body>
}

templ jobListingsContent(jobs []types.JobListing, paginationOpts types.PaginationOpts) {
	<div class="sm:hidden mt-8">
		<div class="space-y-4">
			for _, job := range jobs {
				@jobListingCard(job)
			}
		</div>
		@jobListingsPagination(paginationOpts)
	</div>
	<div class="hidden sm:block mt-8">
		<div class="overflow-hidden">
			<div class="px-4 sm:px-6 lg:px-8">
				<table class="w-full divide-y divide-gray-300 table-fixed">
					<thead>
						<tr>
							<th scope="col" class="w-1/5 px-2 py-3.5 text-left text-sm font-semibold text-gray-900">Company</th>
							<th scope="col" class="w-1/4 px-2 py-3.5 text-left text-sm font-semibold text-gray-900">Title</th>
							<th scope="col" class="w-1/6 px-2 py-3.5 text-left text-sm font-semibold text-gray-900 hidden md:table-cell">Location</th>
							<th scope="col" class="w-1/6 px-2 py-3.5 text-left text-sm font-semibold text-gray-900 hidden lg:table-cell">Work Type</th>
							<th scope="col" class="w-1/6 px-2 py-3.5 text-left text-sm font-semibold text-gray-900 hidden lg:table-cell">Salary</th>
							<th scope="col" class="w-16 px-2 py-3.5 text-right text-sm font-semibold text-gray-900"></th>
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200">
						for _, job := range jobs {
							@jobListingRow(job)
						}
					</tbody>
				</table>
			</div>
		</div>
		@jobListingsPagination(paginationOpts)
	</div>
}

templ jobListingRow(job types.JobListing) {
	<tr class="hover:bg-gray-50">
		<td class="px-2 py-4">
			<div class="truncate">
				<div class="text-sm font-medium text-gray-900 truncate">{ job.Company }</div>
			</div>
		</td>
		<td class="px-2 py-4">
			<div>
				<div class="text-sm font-medium text-gray-900 truncate">{ job.Title }</div>
				if job.RoleType != nil {
					<div class="text-xs text-gray-500 truncate">{ *job.RoleType }</div>
				}
			</div>
		</td>
		<td class="px-2 py-4 text-sm text-gray-500 hidden md:table-cell">
			<div class="truncate">
				if job.Location != nil {
					{ *job.Location }
				} else {
					<span class="text-gray-400">Not specified</span>
				}
			</div>
		</td>
		<td class="px-2 py-4 text-sm text-gray-500 hidden lg:table-cell">
			<div class="flex gap-1">
				if job.IsRemote {
					<span class="inline-flex items-center rounded-full bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
						Remote
					</span>
				}
				if job.IsHybrid {
					<span class="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-600/20">
						Hybrid
					</span>
				}
				if !job.IsRemote && !job.IsHybrid {
					<span class="inline-flex items-center rounded-full bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
						On-site
					</span>
				}
			</div>
		</td>
		<td class="px-2 py-4 text-sm text-gray-500 hidden lg:table-cell">
			<div class="truncate">
				if job.Salary != nil {
					{ *job.Salary }
				} else {
					<span class="text-gray-400">Not specified</span>
				}
			</div>
		</td>
		<td class="py-4 text-right">
			<button
				class="rounded-md bg-white px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:block"
				onclick="toggleSlideOver('job-listing-details')"
				hx-get={ "/job-listings/" + job.ID }
				hx-target="#job-listing-details"
				hx-trigger="click"
			>
				View
			</button>
		</td>
	</tr>
}

templ jobListingCard(job types.JobListing) {
	<div class="bg-white rounded-lg border border-gray-200 p-4 shadow-sm hover:shadow-md transition-shadow">
		<div class="flex items-start justify-between mb-3">
			<div class="flex-1 min-w-0">
				<h3 class="text-lg font-semibold text-gray-900 truncate">{ job.Company }</h3>
			</div>
			<div class="ml-3 flex-shrink-0">
				if job.IsRemote {
					<span class="inline-flex items-center rounded-full bg-green-50 px-2.5 py-0.5 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
						Remote
					</span>
				} else if job.IsHybrid {
					<span class="inline-flex items-center rounded-full bg-blue-50 px-2.5 py-0.5 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-600/20">
						Hybrid
					</span>
				} else {
					<span class="inline-flex items-center rounded-full bg-gray-50 px-2.5 py-0.5 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
						On-site
					</span>
				}
			</div>
		</div>
		<div class="mb-3">
			<h4 class="text-base font-medium text-gray-900 mb-1">{ job.Title }</h4>
			if job.RoleType != nil {
				<p class="text-sm text-gray-600">{ *job.RoleType }</p>
			}
		</div>
		<div class="grid grid-cols-2 gap-3 mb-4 text-sm">
			<div>
				<span class="text-gray-500">Location:</span>
				<p class="font-medium text-gray-900">
					if job.Location != nil {
						{ *job.Location }
					} else {
						<span class="text-gray-400">Not specified</span>
					}
				</p>
			</div>
			<div>
				<span class="text-gray-500">Salary:</span>
				<p class="font-medium text-gray-900">
					if job.Salary != nil {
						{ *job.Salary }
					} else {
						<span class="text-gray-400">Not specified</span>
					}
				</p>
			</div>
		</div>
		<div class="flex justify-end">
			<button
				class="rounded-md bg-blue-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 cursor-pointer"
				onclick="toggleSlideOver('job-listing-details')"
				hx-get={ "/job-listings/" + job.ID }
				hx-target="#job-listing-details"
				hx-trigger="click"
			>
				View Details
			</button>
		</div>
	</div>
}

templ jobSourceBadge(source types.JobSource) {
	{{ sourceInfo := source.Info() }}
	if source != "" {
		<span class={ "inline-flex items-center rounded-full px-2 py-1 text-xs font-medium", sourceInfo.BadgeClass }>
			{ sourceInfo.DisplayName }
		</span>
	} else {
		<span class="text-gray-400">Unknown</span>
	}
}

templ jobListingsPagination(paginationOpts types.PaginationOpts) {
	<nav class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-8" aria-label="Pagination">
		<div class="flex flex-1 justify-between sm:justify-end">
			<button
				type="button"
				class="relative inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
				disabled?={ paginationOpts.Page == 0 }
				hx-get={ "/job-listings?page=" + strconv.FormatInt(paginationOpts.Page-1, 10) + "&per_page=" + strconv.FormatInt(paginationOpts.PerPage, 10) }
				hx-target="body"
				hx-trigger="click"
			>
				Previous
			</button>
			<button
				type="button"
				class="relative ml-3 inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
				disabled?={ int64(paginationOpts.Showing) < paginationOpts.PerPage }
				hx-get={ "/job-listings?page=" + strconv.FormatInt(paginationOpts.Page+1, 10) + "&per_page=" + strconv.FormatInt(paginationOpts.PerPage, 10) }
				hx-target="body"
				hx-trigger="click"
			>
				Next
			</button>
		</div>
	</nav>
}
