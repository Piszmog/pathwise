package components

import (
	"github.com/Piszmog/pathwise/ui/types"
	"github.com/Piszmog/pathwise/ui/utils"
	"strconv"
)

templ loadingJobs(archived bool) {
	<div hx-get={ "/jobs?archived=" + strconv.FormatBool(archived) } hx-trigger="load">
		@Jobs(nil, types.PaginationOpts{}, types.FilterOpts{})
	</div>
}

templ Jobs(jobs []types.JobApplication, paginationOpts types.PaginationOpts, filterOpts types.FilterOpts) {
	<div id="jobs">
		@jobList(jobs)
		@pagination(paginationOpts, filterOpts)
	</div>
}

templ jobList(jobs []types.JobApplication) {
	<ul id="job-list" role="list" class="divide-y divide-gray-100 px-4 py-5 sm:px-6">
		for _, j := range jobs {
			@jobRow(j)
		}
	</ul>
}

templ jobRow(j types.JobApplication) {
	<li id={ utils.JobRowID(j.ID) } class="flex items-center justify-between gap-x-6 py-5">
		@job(j)
		<div class="flex flex-none items-center gap-x-4">
			<button
				class="rounded-md bg-white px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:block"
				onclick="toggleSlideOver('job-details')"
				hx-get={ "/jobs/" + strconv.FormatInt(j.ID, 10) }
				hx-target="#job-details"
				hx-trigger="click"
			>
				View job
			</button>
		</div>
	</li>
}

templ job(j types.JobApplication) {
	<div id={ utils.JobRowMetadata(j.ID) } class="min-w-0">
		<div class="flex items-start gap-x-3">
			<p class="text-sm font-semibold leading-6 text-gray-900">{ j.Company }</p>
			@statusBadge(j.Status)
		</div>
		<div class="mt-1 flex items-center gap-x-2 text-xs leading-5 text-gray-500">
			<p class="truncate">{ j.Title }</p>
			<svg viewBox="0 0 2 2" class="h-0.5 w-0.5 fill-current">
				<circle cx="1" cy="1" r="1"></circle>
			</svg>
			<p class="whitespace-nowrap">
				Updated
				<time datetime="2023-03-17T00:00Z">
					{ j.UpdatedAt.Format("Mon Jan 2 2006") }
				</time>
			</p>
		</div>
	</div>
}

templ JobDetails(j types.JobApplication, timelineEntries []types.JobApplicationTimelineEntry) {
	<form
		id="job-form"
		hx-patch={ "/jobs/" + strconv.FormatInt(j.ID, 10) }
		hx-target={ "#" + utils.JobRowMetadata(j.ID) }
		hx-swap="outerHTML"
		hx-ext="response-targets"
		hx-target-error="#job-form-error"
		disabled?={ j.Archived }
	>
		<div id="job-form-error"></div>
		<input
			type="hidden"
			name="firstTimelineEntryID"
			value={ strconv.FormatInt(utils.GetFirstElementID(timelineEntries),
		10) }
		/>
		<input type="hidden" name="firstTimelineEntryType" value={ string(utils.GetFirstElementType(timelineEntries)) } disabled?={ j.Archived }/>
		<div class="mb-5 flex items-center gap-x-2 text-xs leading-5 text-gray-500">
			<p class="whitespace-nowrap">
				Applied
				<time datetime="2023-03-17T00:00Z">
					{ j.AppliedAt.Format("Mon Jan 2 2006") }
				</time>
			</p>
			<svg viewBox="0 0 2 2" class="h-0.5 w-0.5 fill-current">
				<circle cx="1" cy="1" r="1"></circle>
			</svg>
			<p class="whitespace-nowrap">
				Updated
				<time datetime="2023-03-17T00:00Z">
					{ j.UpdatedAt.Format("Mon Jan 2 2006") }
				</time>
			</p>
		</div>
		<div class="grid grid-cols-2 gap-x-6 gap-y-8">
			<div>
				<label for="company" class="block text-sm font-medium leading-6 text-gray-900">Company</label>
				<div class="mt-2">
					<input
						type="text"
						name="company"
						id="company"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 read-only:bg-gray-50 read-only:text-gray-500 read-only:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
						value={ j.Company }
						disabled?={ j.Archived }
					/>
				</div>
			</div>
			<div>
				<label for="title" class="block text-sm font-medium leading-6 text-gray-900">Title</label>
				<div class="mt-2">
					<input
						type="text"
						name="title"
						id="title"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 read-only:bg-gray-50 read-only:text-gray-500 read-only:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
						value={ j.Title }
						disabled?={ j.Archived }
					/>
				</div>
			</div>
			<div>
				<label for="url" class="block text-sm font-medium leading-6 text-gray-900">URL</label>
				<div class="mt-2">
					<input
						type="url"
						name="url"
						id="url"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 read-only:bg-gray-50 read-only:text-gray-500 read-only:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
						value={ j.URL }
						disabled?={ j.Archived }
					/>
				</div>
			</div>
			<div>
				<input type="hidden" name="previousStatus" value={ j.Status.String() }/>
				@inputSelect(types.SelectOpts{
					Name:     "status",
					Label:    "Status",
					Options:  types.JobApplicationStatusSelectOptions,
					Required: true,
					Value:    j.Status.String(),
					Disabled: j.Archived,
				})
			</div>
			<div class="col-span-2">
				<div class="grid grid-cols-5 gap-x-4">
					<div class="col-span-1">
						<label for="salary_currency" class="block text-sm font-medium leading-6 text-gray-900">Currency</label>
						<div class="mt-2">
							<select
								id="salary_currency"
								name="salary_currency"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 disabled:bg-gray-50 disabled:text-gray-500 disabled:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
								disabled?={ j.Archived }
							>
								<option value="">Select (optional)</option>
								for _, currency := range types.AvailableCurrencies {
									if j.SalaryCurrency.Valid && j.SalaryCurrency.String == currency.Code {
										<option value={ currency.Code } selected>{ currency.Symbol + " (" + currency.Code + ")" }</option>
									} else {
										<option value={ currency.Code }>{ currency.Symbol + " (" + currency.Code + ")" }</option>
									}
								}
							</select>
						</div>
					</div>
					<div class="col-span-2">
						<label for="salary_min" class="block text-sm font-medium leading-6 text-gray-900">Min Salary</label>
						<div class="mt-2">
							<input
								type="number"
								name="salary_min"
								id="salary_min"
								placeholder="Minimum"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 read-only:bg-gray-50 read-only:text-gray-500 read-only:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
								value={ func() string { if j.SalaryMin.Valid { return strconv.FormatInt(j.SalaryMin.Int64, 10) }; return "" }() }
								disabled?={ j.Archived }
							/>
						</div>
					</div>
					<div class="col-span-2">
						<label for="salary_max" class="block text-sm font-medium leading-6 text-gray-900">Max Salary</label>
						<div class="mt-2">
							<input
								type="number"
								name="salary_max"
								id="salary_max"
								placeholder="Maximum"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-gray-300 placeholder:text-gray-400 read-only:bg-gray-50 read-only:text-gray-500 read-only:ring-gray-200 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
								value={ func() string { if j.SalaryMax.Valid { return strconv.FormatInt(j.SalaryMax.Int64, 10) }; return "" }() }
								disabled?={ j.Archived }
							/>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="mt-6 flex items-center justify-end gap-x-6">
			<button
				type="button"
				class="text-sm font-semibold leading-6 text-gray-900"
				onclick="toggleSlideOver('job-details')"
			>
				Cancel
			</button>
			if j.Archived {
				<button
					type="button"
					class="rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600"
					hx-patch={ "/jobs/" + strconv.FormatInt(j.ID, 10) + "/unarchive" }
					hx-target="#jobs"
					hx-swap="outerHTML"
					onclick="toggleSlideOver('job-details')"
				>
					Unarchive
				</button>
			} else {
				<button
					type="button"
					class="rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600"
					hx-patch={ "/jobs/" + strconv.FormatInt(j.ID, 10) + "/archive" }
					hx-target="#jobs"
					hx-swap="outerHTML"
					onclick="toggleSlideOver('job-details')"
				>
					Archive
				</button>
				<button
					type="submit"
					class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
				>
					Update
				</button>
			}
		</div>
	</form>
	@Timeline(timelineEntries, "")
	if !j.Archived {
		<div class="mt-6 flex gap-x-3">
			@note(j.ID, j.Archived)
		</div>
	}
}

templ jobApplicationForm() {
	<script type="text/javascript">
		function afterRequest(form) {
			form.reset();
			const slideOver = document.getElementById("new-job-slideOver");
			const overlay = document.getElementById("new-job-overlay");
			slideOver.classList.toggle("translate-x-full");
			overlay.classList.toggle("hidden");
		}
	</script>
	<form
		id="new-job-form"
		hx-post="/jobs"
		hx-on::after-request="afterRequest(this)"
		hx-target="#jobs"
		hx-swap="outerHTML"
		hx-ext="response-targets"
		hx-target-error="#new-job-form-error"
	>
		<div id="new-job-form-error"></div>
		<div class="grid grid-cols-1 gap-x-6 gap-y-8">
			<div>
				<label for="company" class="block text-sm font-medium leading-6 text-gray-900">Company</label>
				<div class="mt-2">
					<input
						type="text"
						name="company"
						id="company"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
						required
					/>
				</div>
			</div>
			<div>
				<label for="title" class="block text-sm font-medium leading-6 text-gray-900">Title</label>
				<div class="mt-2">
					<input
						type="text"
						name="title"
						id="title"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
						required
					/>
				</div>
			</div>
			<div>
				<label for="url" class="block text-sm font-medium leading-6 text-gray-900">URL</label>
				<div class="mt-2">
					<input
						type="url"
						name="url"
						id="url"
						class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
					/>
				</div>
			</div>
			<div>
				<div class="grid grid-cols-5 gap-x-4">
					<div class="col-span-1">
						<label for="new-salary_currency" class="block text-sm font-medium leading-6 text-gray-900">Currency</label>
						<div class="mt-2">
							<select
								id="new-salary_currency"
								name="salary_currency"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
							>
								<option value="">Select (optional)</option>
								for _, currency := range types.AvailableCurrencies {
									<option value={ currency.Code }>{ currency.Symbol + " (" + currency.Code + ")" }</option>
								}
							</select>
						</div>
					</div>
					<div class="col-span-2">
						<label for="new-salary_min" class="block text-sm font-medium leading-6 text-gray-900">Min Salary</label>
						<div class="mt-2">
							<input
								type="number"
								name="salary_min"
								id="new-salary_min"
								placeholder="Minimum"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
							/>
						</div>
					</div>
					<div class="col-span-2">
						<label for="new-salary_max" class="block text-sm font-medium leading-6 text-gray-900">Max Salary</label>
						<div class="mt-2">
							<input
								type="number"
								name="salary_max"
								id="new-salary_max"
								placeholder="Maximum"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
							/>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="mt-6 flex items-center justify-end gap-x-6">
			<button
				type="button"
				class="text-sm font-semibold leading-6 text-gray-900"
				onclick="toggleSlideOver('new-job')"
			>
				Cancel
			</button>
			<button
				type="submit"
				class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
			>
				Add
			</button>
		</div>
	</form>
}
