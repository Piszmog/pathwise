// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_application_note.sql

package queries

import (
	"context"
	"time"
)

const getJobApplicationNotesByJobApplicationID = `-- name: GetJobApplicationNotesByJobApplicationID :many
SELECT
	n.created_at, n.note, n.job_application_id, n.id
FROM 
	job_application_notes n
WHERE
	n.job_application_id = ?
ORDER BY n.created_at DESC
`

type GetJobApplicationNotesByJobApplicationIDRow struct {
	CreatedAt        time.Time
	Note             string
	JobApplicationID int64
	ID               int64
}

func (q *Queries) GetJobApplicationNotesByJobApplicationID(ctx context.Context, jobApplicationID int64) ([]GetJobApplicationNotesByJobApplicationIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobApplicationNotesByJobApplicationID, jobApplicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobApplicationNotesByJobApplicationIDRow
	for rows.Next() {
		var i GetJobApplicationNotesByJobApplicationIDRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Note,
			&i.JobApplicationID,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertJobApplicationNote = `-- name: InsertJobApplicationNote :one
INSERT INTO job_application_notes (note, job_application_id) 
VALUES (?, ?)
RETURNING created_at, note, job_application_id, id
`

type InsertJobApplicationNoteParams struct {
	Note             string
	JobApplicationID int64
}

type InsertJobApplicationNoteRow struct {
	CreatedAt        time.Time
	Note             string
	JobApplicationID int64
	ID               int64
}

func (q *Queries) InsertJobApplicationNote(ctx context.Context, arg InsertJobApplicationNoteParams) (InsertJobApplicationNoteRow, error) {
	row := q.db.QueryRowContext(ctx, insertJobApplicationNote, arg.Note, arg.JobApplicationID)
	var i InsertJobApplicationNoteRow
	err := row.Scan(
		&i.CreatedAt,
		&i.Note,
		&i.JobApplicationID,
		&i.ID,
	)
	return i, err
}
