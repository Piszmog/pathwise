// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_job_counts.sql

package queries

import (
	"context"
	"database/sql"
)

const decrementCompanyCount = `-- name: DecrementCompanyCount :exec
UPDATE user_company_counts 
SET count = CASE WHEN count > 0 THEN count - 1 ELSE 0 END,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND company = ? AND archived = ?
`

type DecrementCompanyCountParams struct {
	UserID   int64
	Company  string
	Archived bool
}

func (q *Queries) DecrementCompanyCount(ctx context.Context, arg DecrementCompanyCountParams) error {
	_, err := q.db.ExecContext(ctx, decrementCompanyCount, arg.UserID, arg.Company, arg.Archived)
	return err
}

const decrementJobCount = `-- name: DecrementJobCount :exec
UPDATE user_job_counts 
SET count = CASE WHEN count > 0 THEN count - 1 ELSE 0 END,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND archived = ? AND 
      COALESCE(company, '') = COALESCE(?, '') AND 
      COALESCE(status, '') = COALESCE(?, '')
`

type DecrementJobCountParams struct {
	UserID   int64
	Archived bool
	Company  sql.NullString
	Status   sql.NullString
}

func (q *Queries) DecrementJobCount(ctx context.Context, arg DecrementJobCountParams) error {
	_, err := q.db.ExecContext(ctx, decrementJobCount,
		arg.UserID,
		arg.Archived,
		arg.Company,
		arg.Status,
	)
	return err
}

const getCompanyCountByUserID = `-- name: GetCompanyCountByUserID :one
SELECT COUNT(*) as count
FROM user_company_counts 
WHERE user_id = ? AND archived = ? AND count > 0
`

type GetCompanyCountByUserIDParams struct {
	UserID   int64
	Archived bool
}

func (q *Queries) GetCompanyCountByUserID(ctx context.Context, arg GetCompanyCountByUserIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCompanyCountByUserID, arg.UserID, arg.Archived)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCompanyJobCount = `-- name: GetCompanyJobCount :one
SELECT COALESCE(count, 0) as count
FROM user_company_counts 
WHERE user_id = ? AND company = ? AND archived = ?
`

type GetCompanyJobCountParams struct {
	UserID   int64
	Company  string
	Archived bool
}

func (q *Queries) GetCompanyJobCount(ctx context.Context, arg GetCompanyJobCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCompanyJobCount, arg.UserID, arg.Company, arg.Archived)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobCountByUserID = `-- name: GetJobCountByUserID :one

SELECT COALESCE(count, 0) as count 
FROM user_job_counts 
WHERE user_id = ? AND archived = ? AND company IS NULL AND status IS NULL
`

type GetJobCountByUserIDParams struct {
	UserID   int64
	Archived bool
}

// Queries for user_job_counts aggregate table
func (q *Queries) GetJobCountByUserID(ctx context.Context, arg GetJobCountByUserIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getJobCountByUserID, arg.UserID, arg.Archived)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobCountByUserIDAndCompany = `-- name: GetJobCountByUserIDAndCompany :one
SELECT COALESCE(count, 0) as count 
FROM user_job_counts 
WHERE user_id = ? AND archived = ? AND company = ? AND status IS NULL
`

type GetJobCountByUserIDAndCompanyParams struct {
	UserID   int64
	Archived bool
	Company  sql.NullString
}

func (q *Queries) GetJobCountByUserIDAndCompany(ctx context.Context, arg GetJobCountByUserIDAndCompanyParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getJobCountByUserIDAndCompany, arg.UserID, arg.Archived, arg.Company)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobCountByUserIDAndCompanyAndStatus = `-- name: GetJobCountByUserIDAndCompanyAndStatus :one
SELECT COALESCE(count, 0) as count 
FROM user_job_counts 
WHERE user_id = ? AND archived = ? AND company = ? AND status = ?
`

type GetJobCountByUserIDAndCompanyAndStatusParams struct {
	UserID   int64
	Archived bool
	Company  sql.NullString
	Status   sql.NullString
}

func (q *Queries) GetJobCountByUserIDAndCompanyAndStatus(ctx context.Context, arg GetJobCountByUserIDAndCompanyAndStatusParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getJobCountByUserIDAndCompanyAndStatus,
		arg.UserID,
		arg.Archived,
		arg.Company,
		arg.Status,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobCountByUserIDAndStatus = `-- name: GetJobCountByUserIDAndStatus :one
SELECT COALESCE(count, 0) as count 
FROM user_job_counts 
WHERE user_id = ? AND archived = ? AND company IS NULL AND status = ?
`

type GetJobCountByUserIDAndStatusParams struct {
	UserID   int64
	Archived bool
	Status   sql.NullString
}

func (q *Queries) GetJobCountByUserIDAndStatus(ctx context.Context, arg GetJobCountByUserIDAndStatusParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getJobCountByUserIDAndStatus, arg.UserID, arg.Archived, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const incrementCompanyCount = `-- name: IncrementCompanyCount :exec
INSERT INTO user_company_counts (user_id, company, archived, count)
VALUES (?, ?, ?, 1)
ON CONFLICT(user_id, company, archived)
DO UPDATE SET 
    count = count + 1,
    updated_at = CURRENT_TIMESTAMP
`

type IncrementCompanyCountParams struct {
	UserID   int64
	Company  string
	Archived bool
}

func (q *Queries) IncrementCompanyCount(ctx context.Context, arg IncrementCompanyCountParams) error {
	_, err := q.db.ExecContext(ctx, incrementCompanyCount, arg.UserID, arg.Company, arg.Archived)
	return err
}

const incrementJobCount = `-- name: IncrementJobCount :exec
INSERT INTO user_job_counts (user_id, archived, company, status, count)
VALUES (?, ?, ?, ?, 1)
ON CONFLICT(user_id, archived, COALESCE(company, ''), COALESCE(status, ''))
DO UPDATE SET 
    count = count + 1,
    updated_at = CURRENT_TIMESTAMP
`

type IncrementJobCountParams struct {
	UserID   int64
	Archived bool
	Company  sql.NullString
	Status   sql.NullString
}

func (q *Queries) IncrementJobCount(ctx context.Context, arg IncrementJobCountParams) error {
	_, err := q.db.ExecContext(ctx, incrementJobCount,
		arg.UserID,
		arg.Archived,
		arg.Company,
		arg.Status,
	)
	return err
}

const recalculateCompanyCountsForUser = `-- name: RecalculateCompanyCountsForUser :exec
DELETE FROM user_company_counts WHERE user_id = ?
`

func (q *Queries) RecalculateCompanyCountsForUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, recalculateCompanyCountsForUser, userID)
	return err
}

const recalculateJobCountsForUser = `-- name: RecalculateJobCountsForUser :exec
DELETE FROM user_job_counts WHERE user_id = ?
`

func (q *Queries) RecalculateJobCountsForUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, recalculateJobCountsForUser, userID)
	return err
}

const upsertCompanyCount = `-- name: UpsertCompanyCount :exec
INSERT OR REPLACE INTO user_company_counts (user_id, company, archived, count, updated_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type UpsertCompanyCountParams struct {
	UserID   int64
	Company  string
	Archived bool
	Count    int64
}

func (q *Queries) UpsertCompanyCount(ctx context.Context, arg UpsertCompanyCountParams) error {
	_, err := q.db.ExecContext(ctx, upsertCompanyCount,
		arg.UserID,
		arg.Company,
		arg.Archived,
		arg.Count,
	)
	return err
}

const upsertJobCount = `-- name: UpsertJobCount :exec
INSERT OR REPLACE INTO user_job_counts (user_id, archived, company, status, count, updated_at)
VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type UpsertJobCountParams struct {
	UserID   int64
	Archived bool
	Company  sql.NullString
	Status   sql.NullString
	Count    int64
}

func (q *Queries) UpsertJobCount(ctx context.Context, arg UpsertJobCountParams) error {
	_, err := q.db.ExecContext(ctx, upsertJobCount,
		arg.UserID,
		arg.Archived,
		arg.Company,
		arg.Status,
		arg.Count,
	)
	return err
}
