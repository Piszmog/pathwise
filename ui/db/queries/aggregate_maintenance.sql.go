// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: aggregate_maintenance.sql

package queries

import (
	"context"
)

const checkIfNewCompany = `-- name: CheckIfNewCompany :one
SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE 0 END as is_new_company
FROM job_applications 
WHERE user_id = ? AND company = ? AND archived = 0 AND id != ?
`

type CheckIfNewCompanyParams struct {
	UserID  int64
	Company string
	ID      int64
}

// Checks if this is a new company for the user
func (q *Queries) CheckIfNewCompany(ctx context.Context, arg CheckIfNewCompanyParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfNewCompany, arg.UserID, arg.Company, arg.ID)
	var is_new_company int64
	err := row.Scan(&is_new_company)
	return is_new_company, err
}

const getJobApplicationForAggregates = `-- name: GetJobApplicationForAggregates :one
SELECT company, status, archived, user_id FROM job_applications WHERE id = ?
`

type GetJobApplicationForAggregatesRow struct {
	Company  string
	Status   string
	Archived int64
	UserID   int64
}

// Gets job application data needed for aggregate updates
func (q *Queries) GetJobApplicationForAggregates(ctx context.Context, id int64) (GetJobApplicationForAggregatesRow, error) {
	row := q.db.QueryRowContext(ctx, getJobApplicationForAggregates, id)
	var i GetJobApplicationForAggregatesRow
	err := row.Scan(
		&i.Company,
		&i.Status,
		&i.Archived,
		&i.UserID,
	)
	return i, err
}

const updateAggregatesOnArchive = `-- name: UpdateAggregatesOnArchive :exec
UPDATE job_application_stats 
SET 
    total_applications = total_applications + ?,
    total_applications_archived = total_applications_archived + ?,
    total_companies = total_companies + ?,
    total_companies_archived = total_companies_archived + ?,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?
`

type UpdateAggregatesOnArchiveParams struct {
	TotalApplications         int64
	TotalApplicationsArchived int64
	TotalCompanies            int64
	TotalCompaniesArchived    int64
	UserID                    int64
}

// Updates aggregate tables when job applications are archived/unarchived
func (q *Queries) UpdateAggregatesOnArchive(ctx context.Context, arg UpdateAggregatesOnArchiveParams) error {
	_, err := q.db.ExecContext(ctx, updateAggregatesOnArchive,
		arg.TotalApplications,
		arg.TotalApplicationsArchived,
		arg.TotalCompanies,
		arg.TotalCompaniesArchived,
		arg.UserID,
	)
	return err
}

const updateAggregatesOnInsert = `-- name: UpdateAggregatesOnInsert :exec

UPDATE job_application_stats 
SET 
    total_applications = total_applications + 1,
    total_applied = total_applied + 1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?
`

// Queries for maintaining aggregate tables when job applications change
// Updates job_application_stats when a new job application is inserted
func (q *Queries) UpdateAggregatesOnInsert(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, updateAggregatesOnInsert, userID)
	return err
}

const updateAggregatesOnStatusChange = `-- name: UpdateAggregatesOnStatusChange :exec
UPDATE job_application_stats 
SET 
    total_accepted = total_accepted + ?,
    total_applied = total_applied + ?,
    total_canceled = total_canceled + ?,
    total_declined = total_declined + ?,
    total_interviewing = total_interviewing + ?,
    total_offers = total_offers + ?,
    total_rejected = total_rejected + ?,
    total_watching = total_watching + ?,
    total_widthdrawn = total_widthdrawn + ?,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?
`

type UpdateAggregatesOnStatusChangeParams struct {
	TotalAccepted     int64
	TotalApplied      int64
	TotalCanceled     int64
	TotalDeclined     int64
	TotalInterviewing int64
	TotalOffers       int64
	TotalRejected     int64
	TotalWatching     int64
	TotalWidthdrawn   int64
	UserID            int64
}

// Updates aggregate tables when job application status changes
func (q *Queries) UpdateAggregatesOnStatusChange(ctx context.Context, arg UpdateAggregatesOnStatusChangeParams) error {
	_, err := q.db.ExecContext(ctx, updateAggregatesOnStatusChange,
		arg.TotalAccepted,
		arg.TotalApplied,
		arg.TotalCanceled,
		arg.TotalDeclined,
		arg.TotalInterviewing,
		arg.TotalOffers,
		arg.TotalRejected,
		arg.TotalWatching,
		arg.TotalWidthdrawn,
		arg.UserID,
	)
	return err
}
