// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_application_status_history.sql

package queries

import (
	"context"
)

const countJobApplicationStatusHistoriesByJobApplicationID = `-- name: CountJobApplicationStatusHistoriesByJobApplicationID :one
SELECT COUNT(*) FROM job_application_status_histories WHERE job_application_id = ?
`

func (q *Queries) CountJobApplicationStatusHistoriesByJobApplicationID(ctx context.Context, jobApplicationID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countJobApplicationStatusHistoriesByJobApplicationID, jobApplicationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobApplicationStatusHistoriesByJobApplicationID = `-- name: GetJobApplicationStatusHistoriesByJobApplicationID :many
SELECT
	h.created_at, h.status, h.id, h.job_application_id
FROM 
	job_application_status_histories h
WHERE
	h.job_application_id = ?
ORDER BY h.created_at DESC
`

func (q *Queries) GetJobApplicationStatusHistoriesByJobApplicationID(ctx context.Context, jobApplicationID int64) ([]JobApplicationStatusHistory, error) {
	rows, err := q.db.QueryContext(ctx, getJobApplicationStatusHistoriesByJobApplicationID, jobApplicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobApplicationStatusHistory
	for rows.Next() {
		var i JobApplicationStatusHistory
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Status,
			&i.ID,
			&i.JobApplicationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestJobApplicationStatusHistoryByID = `-- name: GetLatestJobApplicationStatusHistoryByID :one
SELECT
	h.created_at, h.status, h.id, h.job_application_id
FROM 
	job_application_status_histories h
WHERE
	h.job_application_id = ?
ORDER BY h.created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestJobApplicationStatusHistoryByID(ctx context.Context, jobApplicationID int64) (JobApplicationStatusHistory, error) {
	row := q.db.QueryRowContext(ctx, getLatestJobApplicationStatusHistoryByID, jobApplicationID)
	var i JobApplicationStatusHistory
	err := row.Scan(
		&i.CreatedAt,
		&i.Status,
		&i.ID,
		&i.JobApplicationID,
	)
	return i, err
}

const insertJobApplicationStatusHistory = `-- name: InsertJobApplicationStatusHistory :exec
INSERT INTO job_application_status_histories (job_application_id) 
VALUES (?)
`

func (q *Queries) InsertJobApplicationStatusHistory(ctx context.Context, jobApplicationID int64) error {
	_, err := q.db.ExecContext(ctx, insertJobApplicationStatusHistory, jobApplicationID)
	return err
}

const insertJobApplicationStatusHistoryWithStatus = `-- name: InsertJobApplicationStatusHistoryWithStatus :exec
INSERT INTO job_application_status_histories (status, job_application_id)
VALUES (?, ?)
`

type InsertJobApplicationStatusHistoryWithStatusParams struct {
	Status           string
	JobApplicationID int64
}

func (q *Queries) InsertJobApplicationStatusHistoryWithStatus(ctx context.Context, arg InsertJobApplicationStatusHistoryWithStatusParams) error {
	_, err := q.db.ExecContext(ctx, insertJobApplicationStatusHistoryWithStatus, arg.Status, arg.JobApplicationID)
	return err
}
