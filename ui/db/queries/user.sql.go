// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package queries

import (
	"context"
)

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, password, id FROM users WHERE email = ?
`

type GetUserByEmailRow struct {
	Email    string
	Password string
	ID       int64
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.Email, &i.Password, &i.ID)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT email, password, id FROM users WHERE id = ?
`

type GetUserByIDRow struct {
	Email    string
	Password string
	ID       int64
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.Email, &i.Password, &i.ID)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, password, initial_ip_address)
VALUES (?, ?, ?)
RETURNING id
`

type InsertUserParams struct {
	Email            string
	Password         string
	InitialIpAddress string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.Password, arg.InitialIpAddress)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = ? WHERE id = ?
`

type UpdateUserPasswordParams struct {
	Password string
	ID       int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
