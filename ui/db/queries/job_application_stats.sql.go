// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_application_stats.sql

package queries

import (
	"context"
)

const getJobApplicationStat = `-- name: GetJobApplicationStat :one
SELECT 
	average_time_to_hear_back,
	total_applications,
	total_companies,
	total_interviewing,
	total_rejected
FROM
	job_application_stats
WHERE
	user_id = ?
`

type GetJobApplicationStatRow struct {
	AverageTimeToHearBack int64
	TotalApplications     int64
	TotalCompanies        int64
	TotalInterviewing     int64
	TotalRejected         int64
}

func (q *Queries) GetJobApplicationStat(ctx context.Context, userID int64) (GetJobApplicationStatRow, error) {
	row := q.db.QueryRowContext(ctx, getJobApplicationStat, userID)
	var i GetJobApplicationStatRow
	err := row.Scan(
		&i.AverageTimeToHearBack,
		&i.TotalApplications,
		&i.TotalCompanies,
		&i.TotalInterviewing,
		&i.TotalRejected,
	)
	return i, err
}

const incrementNewJobApplicationStat = `-- name: IncrementNewJobApplicationStat :exec
UPDATE job_application_stats
SET
	total_applications = total_applications + 1,
	total_companies = total_companies + ?,
	total_applied = total_applied + 1,
	updated_at = CURRENT_TIMESTAMP
WHERE
	user_id = ?
`

type IncrementNewJobApplicationStatParams struct {
	TotalCompanies int64
	UserID         int64
}

func (q *Queries) IncrementNewJobApplicationStat(ctx context.Context, arg IncrementNewJobApplicationStatParams) error {
	_, err := q.db.ExecContext(ctx, incrementNewJobApplicationStat, arg.TotalCompanies, arg.UserID)
	return err
}

const insertNewJobApplicationStat = `-- name: InsertNewJobApplicationStat :exec
INSERT INTO job_application_stats (user_id) VALUES (?)
`

func (q *Queries) InsertNewJobApplicationStat(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, insertNewJobApplicationStat, userID)
	return err
}

const setJobApplicationStat = `-- name: SetJobApplicationStat :exec
UPDATE job_application_stats
SET
	total_applications = ?,
	total_companies = ?,
	average_time_to_hear_back = ?,
	total_accepted = ?,
	total_applied = ?,
	total_canceled = ?,
	total_declined = ?,
	total_interviewing = ?,
	total_offers = ?,
	total_rejected = ?,
	total_watching = ?,
	total_widthdrawn = ?,
	updated_at = CURRENT_TIMESTAMP
WHERE
	user_id = ?
`

type SetJobApplicationStatParams struct {
	TotalApplications     int64
	TotalCompanies        int64
	AverageTimeToHearBack int64
	TotalAccepted         int64
	TotalApplied          int64
	TotalCanceled         int64
	TotalDeclined         int64
	TotalInterviewing     int64
	TotalOffers           int64
	TotalRejected         int64
	TotalWatching         int64
	TotalWidthdrawn       int64
	UserID                int64
}

func (q *Queries) SetJobApplicationStat(ctx context.Context, arg SetJobApplicationStatParams) error {
	_, err := q.db.ExecContext(ctx, setJobApplicationStat,
		arg.TotalApplications,
		arg.TotalCompanies,
		arg.AverageTimeToHearBack,
		arg.TotalAccepted,
		arg.TotalApplied,
		arg.TotalCanceled,
		arg.TotalDeclined,
		arg.TotalInterviewing,
		arg.TotalOffers,
		arg.TotalRejected,
		arg.TotalWatching,
		arg.TotalWidthdrawn,
		arg.UserID,
	)
	return err
}

const updateJobApplicationStat = `-- name: UpdateJobApplicationStat :exec
UPDATE job_application_stats
SET
	total_companies = total_companies + ?,
	average_time_to_hear_back = 
		CASE
			WHEN average_time_to_hear_back > 0 THEN (average_time_to_hear_back + ?)/2
			ELSE ?
		END,
	total_accepted = total_accepted + ?,
	total_applied = total_applied + ?,
	total_canceled = total_canceled + ?,
	total_declined = total_declined + ?,
	total_interviewing = total_interviewing + ?,
	total_offers = total_offers + ?,
	total_rejected = total_rejected + ?,
	total_watching = total_watching + ?,
	total_widthdrawn = total_widthdrawn + ?,
	updated_at = CURRENT_TIMESTAMP
WHERE
	user_id = ?
`

type UpdateJobApplicationStatParams struct {
	TotalCompanies          int64
	AverageTimeToHearBack   int64
	AverageTimeToHearBack_2 int64
	TotalAccepted           int64
	TotalApplied            int64
	TotalCanceled           int64
	TotalDeclined           int64
	TotalInterviewing       int64
	TotalOffers             int64
	TotalRejected           int64
	TotalWatching           int64
	TotalWidthdrawn         int64
	UserID                  int64
}

func (q *Queries) UpdateJobApplicationStat(ctx context.Context, arg UpdateJobApplicationStatParams) error {
	_, err := q.db.ExecContext(ctx, updateJobApplicationStat,
		arg.TotalCompanies,
		arg.AverageTimeToHearBack,
		arg.AverageTimeToHearBack_2,
		arg.TotalAccepted,
		arg.TotalApplied,
		arg.TotalCanceled,
		arg.TotalDeclined,
		arg.TotalInterviewing,
		arg.TotalOffers,
		arg.TotalRejected,
		arg.TotalWatching,
		arg.TotalWidthdrawn,
		arg.UserID,
	)
	return err
}
