// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package queries

import (
	"context"
	"time"
)

const deleteOldUserSessions = `-- name: DeleteOldUserSessions :exec
DELETE FROM sessions WHERE expires_at < CURRENT_TIMESTAMP AND user_id = ?
`

func (q *Queries) DeleteOldUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOldUserSessions, userID)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions WHERE token = ?
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, token)
	return err
}

const deleteSessionByUserID = `-- name: DeleteSessionByUserID :exec
DELETE FROM sessions WHERE user_id = ?
`

func (q *Queries) DeleteSessionByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByUserID, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT created_at, expires_at, token, user_id FROM sessions WHERE token = ?
`

type GetSessionByTokenRow struct {
	CreatedAt time.Time
	ExpiresAt time.Time
	Token     string
	UserID    int64
}

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :exec
INSERT INTO sessions (expires_at, user_agent, token, ip_address, user_id) VALUES (?, ?, ?, ?, ?)
`

type InsertSessionParams struct {
	ExpiresAt time.Time
	UserAgent string
	Token     string
	IpAddress string
	UserID    int64
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.ExecContext(ctx, insertSession,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.Token,
		arg.IpAddress,
		arg.UserID,
	)
	return err
}

const updateSessionExpiresAt = `-- name: UpdateSessionExpiresAt :exec
UPDATE sessions SET expires_at = ? WHERE token = ? AND updated_at = CURRENT_TIMESTAMP
`

type UpdateSessionExpiresAtParams struct {
	ExpiresAt time.Time
	Token     string
}

func (q *Queries) UpdateSessionExpiresAt(ctx context.Context, arg UpdateSessionExpiresAtParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionExpiresAt, arg.ExpiresAt, arg.Token)
	return err
}
