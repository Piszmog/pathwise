name: Deploy Dev UI
on:
  push:
    branches:
      - main
    paths:
      - 'ui/**'
      - 'cmd/ui/**'
      - 'internal/**'
      - 'sqlc.yml'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:
concurrency:
  group: deploy-dev-ui
  cancel-in-progress: false
jobs:
  migrate-dev-database:
    name: Run Dev Database Migration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: false
      - name: Run dev database migration
        run: |
          chmod +x ./migrate.sh
          ./migrate.sh -p ${{ secrets.DB_PROTOCOL }} -u ${{ secrets.DEV_DB_URL }} -t ${{ secrets.DEV_DB_TOKEN }} -d up
  build:
    name: Build UI
    runs-on: ubuntu-latest
    needs: [migrate-dev-database]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: false
      - name: Run UI GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --snapshot --skip=publish --config cmd/ui/.goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload UI Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: pathwise-ui-dev_Linux_x86_64.tar.gz
          path: goreleaser-dist/pathwise-ui_Linux_x86_64.tar.gz
          retention-days: 1
  deploy-dev-ui:
    name: Deploy Dev UI to VM
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pathwise-ui-dev_Linux_x86_64.tar.gz
          path: ./artifacts

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create systemd service file
        run: |
          cat > pathwise-dev.service << 'EOF'
          [Unit]
          Description=Pathwise Job Application Tracker - Dev
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu/apps/pathwise-dev
          ExecStart=/home/ubuntu/apps/pathwise-dev/pathwise-ui
          Restart=always
          RestartSec=5
          Environment=DB_TOKEN=${{ secrets.DEV_DB_TOKEN }}
          Environment=DB_URL=${{ secrets.DEV_DB_URL }}
          Environment=LOG_OUTPUT=/var/log/pathwise/pathwise-dev.log
          Environment=PORT=8082

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Deploy to VM
        run: |
          # Copy artifact and service file to VM
          scp ./artifacts/pathwise-ui_Linux_x86_64.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/pathwise-ui-dev_Linux_x86_64.tar.gz
          scp pathwise-dev.service ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          # Extract and deploy on VM
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Stop existing dev service if it exists
            if sudo systemctl is-active --quiet pathwise-dev; then
              sudo systemctl stop pathwise-dev
            fi

            # Create dev app directory if it doesn't exist
            mkdir -p /home/ubuntu/apps/pathwise-dev

            # Extract new version
            cd /tmp
            tar -xzf pathwise-ui-dev_Linux_x86_64.tar.gz

            # Move binary to dev app directory
            mv pathwise-ui /home/ubuntu/apps/pathwise-dev/
            chmod +x /home/ubuntu/apps/pathwise-dev/pathwise-ui

            # Create log directory if it doesn't exist
            sudo mkdir -p /var/log/pathwise
            sudo chown ubuntu:ubuntu /var/log/pathwise

            # Install systemd service file
            sudo mv /tmp/pathwise-dev.service /etc/systemd/system/
          EOF

          # Start service and health check
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Reload systemd and start dev service
            sudo systemctl daemon-reload
            sudo systemctl start pathwise-dev
            sudo systemctl enable pathwise-dev

            # Check status
            sudo systemctl status pathwise-dev
            # Wait for service to start
            sleep 10
            # Health check
            if curl -f http://localhost:8082/health; then
              echo "✅ Dev health check passed - app is running on port 8082"
            else
              echo "❌ Dev health check failed - app is not responding on port 8082"
              exit 1
            fi
          EOF
      - name: Cleanup
        run: |
          rm -f ~/.ssh/id_rsa