name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to release (e.g. v1.0.0)
        required: true
        type: string
permissions:
  contents: write
jobs:
  tag:
    name: Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create Tag
        uses: piszmog/create-tag@v1
        with:
          version: ${{ github.event.inputs.version }}
          message: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ tag ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: pathwise_Linux_x86_64.tar.gz
          path: goreleaser-dist/pathwise_Linux_x86_64.tar.gz
          retention-days: 1
  publish:
    name: Publish Docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ tag ]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/piszmog/pathwise
          tags: |
            type=raw,value=${{ github.event.inputs.version }}
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=$${{ github.event.inputs.version }}
  deploy-gae:
    name: Deploy to GAE
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: [ tag ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Get Version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MODIFIED_VERSION="${VERSION//./-}"
          echo "VERSION_GCP=$MODIFIED_VERSION" >> $GITHUB_ENV
      - run: go mod download
      - run: go tool templ generate -path ./components
      - run: go tool sqlc generate
      - run: go tool go-tw -i ./styles/input.css -o ./dist/assets/css/output@${{ github.event.inputs.version }}.css --minify
      - name: Replace version
        run: sed -i 's/\${version}/'"$VERSION"'/' app.yaml
        env:
          VERSION: ${{ github.event.inputs.version }}
      - name: Replace token secret
        run: sed -i 's/\${secrets.DB_TOKEN}/'"$DB_TOKEN"'/' app.yaml
        env:
          DB_TOKEN: ${{ secrets.DB_TOKEN }}
      # Create a service account in IAM with roles
      # App Engine Admin
      # Cloud Build Editor
      # Service Account User
      # Storage Admin
      # Artifact Registry Reader
      #
      # Create a Workload Identity Pool
      # Create a provider for pool
      # - ODIC
      # - issuer: https://token.actions.githubusercontent.com
      # - Default audience
      # - Attributes
      #   - google.subject: assertion.sub
      #   - attribute.actor: assertion.actor
      #   - attribute.repository: assertion.repository
      #
      # For service account, grant access to principal
      #   - New principals:  principalSet://iam.googleapis.com/projects/<project number>/locations/global/workloadIdentityPools/<pool id>/attribute.repository/<github owner>/<github repo>
      #   - Role: Workload Identity User
      #
      # Enable App Engine Admin API
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_PROVIDER_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_NAME }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - id: 'deploy'
        uses: 'google-github-actions/deploy-appengine@v2'
        with:
          version: ${{ env.VERSION_GCP }}
  deploy-vm:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pathwise_Linux_x86_64.tar.gz
          path: ./artifacts

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create systemd service file
        run: |
          cat > pathwise.service << 'EOF'
          [Unit]
          Description=Pathwise Job Application Tracker
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu/apps/pathwise
          ExecStart=/home/ubuntu/apps/pathwise/pathwise
          Restart=always
          RestartSec=5
          Environment=DB_TOKEN=${{ secrets.DB_TOKEN }}
          Environment=DB_URL=${{ secrets.DB_URL }}
          Environment=LOG_OUTPUT=/var/log/pathwise/pathwise.log
          Environment=PORT=8080

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Deploy to VM
        run: |
          # Copy artifact and service file to VM
          scp ./artifacts/pathwise_Linux_x86_64.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          scp pathwise.service ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          # Extract and deploy on VM
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Stop existing service if it exists
            if sudo systemctl is-active --quiet pathwise; then
              sudo systemctl stop pathwise
            fi

            # Create app directory if it doesn't exist
            mkdir -p /home/ubuntu/apps/pathwise

            # Extract new version
            cd /tmp
            tar -xzf pathwise_Linux_x86_64.tar.gz

            # Move binary to app directory
            mv pathwise /home/ubuntu/apps/pathwise/
            chmod +x /home/ubuntu/apps/pathwise/pathwise

            # Create log directory
            sudo mkdir -p /var/log/pathwise
            sudo chown ubuntu:ubuntu /var/log/pathwise

            # Install systemd service file
            sudo mv /tmp/pathwise.service /etc/systemd/system/
          EOF

          # Start service and health check
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Reload systemd and start service
            sudo systemctl daemon-reload
            sudo systemctl start pathwise
            sudo systemctl enable pathwise

            # Check status
            sudo systemctl status pathwise
            # Wait for service to start
            sleep 10
            
            # Health check
            if curl -f http://localhost:8080/health; then
              echo "✅ Health check passed - app is running"
            else
              echo "❌ Health check failed - app is not responding"
              exit 1
            fi
          EOF

      - name: Cleanup
        run: |
          rm -f ~/.ssh/id_rsa
