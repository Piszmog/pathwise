name: CICD
on:
  push:
    branches:
      - main
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.x
      - run: go mod download
      - run: go install github.com/a-h/templ/cmd/templ@latest
      - run: templ generate -path ./components
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.x
      - run: go mod download
      - run: go install github.com/a-h/templ/cmd/templ@latest
      - run: templ generate -path ./components
      - name: Test
        run: go test -race ./...
  release:
    name: Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
      - name: Create Tag
        uses: negz/create-tag@v1
        with:
          version: ${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.x
      - name: Get Version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
      - name: Get Version
        run: echo "VERSION_GCP=$(cat version.txt | sed 's/\./-/g')" >> $GITHUB_ENV
      - run: go mod download
      - run: go install github.com/a-h/templ/cmd/templ@latest
      - name: Generate Templ Files
        run: templ generate -path ./components
      - name: Generate CSS
        run: |
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
          chmod +x tailwindcss-linux-x64
          mv tailwindcss-linux-x64 tailwindcss
          ./tailwindcss -i ./styles/input.css -o ./assets/css/output@${{ env.VERSION }}.css --minify
      - name: Replace version
        run: sed -i 's/\${version}/'"$VERSION"'/' app.yaml
        env:
          VERSION: ${{ env.VERSION }}
      - name: Replace token secret
        run: sed -i 's/\${secrets.DB_TOKEN}/'"$DB_TOKEN"'/' app.yaml
        env:
          DB_TOKEN: ${{ secrets.DB_TOKEN }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIP }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - id: 'deploy'
        uses: 'google-github-actions/deploy-appengine@v1'
        with:
          version: ${{ env.VERSION_GCP }} 
